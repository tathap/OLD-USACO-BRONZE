#include <iostream>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <math.h>
#include <set>
#include <map>
#include <string>
#include <tuple>
#include <numeric>
#include <climits>
#include <fstream>
using namespace std;

//change the long long to int if you need to save memory/time really badly
typedef long long ll;

//Comment this define when working on interactive problems
#define endl "\n"


#define cout fout
#define cin fin



const ll MAXN = 1e6 + 1;
const ll zer = 0;
const ll one = 1;
const ll inf = LLONG_MAX;
const ll ninf = LLONG_MIN;
const ll MOD = 1e9 + 7;

void solve()
{
    ifstream fin ("crossings.in");
    ofstream fout ("crossings.out");
    
    //read in input

    ll n;
    cin >> n;
    
    pair <ll, ll> path[n + 1];
    for (ll i = 0; i < n; i++) {
        cin >> path[i].first >> path[i].second;
    }
    
    sort(path, path + n);

    
    vector <ll> v; //stores good cows
    v.push_back(path[0].second);
    
    ll maxi = path[0].second;

    
    for (ll i = 1; i < n; i++) {
        if (v.size() == 0 && path[i].second > maxi) {
            maxi = max(maxi, path[i].second);
            v.push_back(path[i].second);
            continue;
        }
        
        ll idx = lower_bound(v.begin(), v.end(), path[i].second) - v.begin();
        if (idx == v.size() && path[i].second > maxi) {
            maxi = max(maxi, path[i].second);
            v.push_back(path[i].second);
            continue;
        }
        
        for (ll i = v.size() - 1; i >= idx; i--) {
            if (v.size() == 0) {
                break;
            }
            v.pop_back();
        }
        
        maxi = max(maxi, path[i].second);
    
    }
    
    
    cout << v.size() << endl;
    
    return;
}


int main()
{
    //Fast IO
    /*ios_base::sync_with_stdio(false);
    cin.tie(0);
    */
    ll t;
    //cin >> t;
    
    t = 1;
    
    while (t--) {
        solve();
    }
}

/*
 10
 7 9
 -1 1
 -8 -9
 13 20
 16 18
 -2 -8
 -5 -7
 6 4
 14 13
 -18 -16
 */
